<?php

/**
 * @file
 * Contains fontawesome_bundle.module
 */

use Drupal\Component\Utility\UrlHelper;

/**
 * Implements hook_page_attachments()
 */
function fontawesome_bundle_page_attachments(array &$page) {
  // Load the configuration settings
  $config_settings = \Drupal::config('fontawesome_bundle.settings');

  $libraries = \Drupal::service('library.discovery')->getLibrariesByExtension('fontawesome_bundle');

  if ($config_settings->get('use_solid') && $config_settings->get('use_light') && $config_settings->get('use_light') && $config_settings->get('use_brand')) {

    // Attach all.js/all.cs library
    $page['#attached']['library'][] = 'fontawesome_bundle/fontawesome_bundle.' . $config_settings->get('method');
  }
  else {

    if ($libraries['fontawesome_bundle.' . $config_settings->get('method') . '.base']) {
      $page['#attached']['library'][] = 'fontawesome_bundle/fontawesome_bundle.' . $config_settings->get('method') . '.base';
    }
    // If enabled then attach solid.js/solid.css
    if ($config_settings->get('use_solid')) {
      $page['#attached']['library'][] = 'fontawesome_bundle/fontawesome_bundle.' . $config_settings->get('method') . '.solid';
    }

    // If enabled then attach regular.js/regular.css
    if ($config_settings->get('use_regular')) {
      $page['#attached']['library'][] = 'fontawesome_bundle/fontawesome_bundle.' . $config_settings->get('method') . '.regular';
    }

    // If enabled then attach light.js/light.css
    if ($config_settings->get('use_light')) {
      $page['#attached']['library'][] = 'fontawesome_bundle/fontawesome_bundle.' . $config_settings->get('method') . '.light';
    }

    // If enabled then attach brands.js/brands.css
    if ($config_settings->get('use_brand')) {
      $page['#attached']['library'][] = 'fontawesome_bundle/fontawesome_bundle.' . $config_settings->get('method') . '.brands';
    }
  }
}

/**
 * Validates the url of the external icon url
 *
 * @param string $url
 *  The url to validate
 *
 * @return boolean
 *  Whether the url is valid
 */
function _fontawesome_bundle_validate_url($url) {
  if (!empty($url) && UrlHelper::isValid($url)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Returns currently enabled icon styles
 */
function _fontawesome_bundle_get_enabled_styles() {
  $config_settings = \Drupal::config('fontawesome_bundle.settings');

  $styles = [];

  if ($config_settings->get('use_solid')) {
    $styles[] = 'solid';
  }

  if ($config_settings->get('use_regular')) {
    $styles[] = 'regular';
  }

  if ($config_settings->get('use_light')) {
    $styles[] = 'light';
  }

  if($config_settings->get('use_brand')) {
    $styles[] = 'brands';
  }

  return $styles;
}

/**
 *
 */
function _fontawesome_bundle_modify_library(&$libraries, $type, $librarySuffix, $cdnLocation) {
  $libraryName = 'fontawesome_bundle.' . $type;
  if (!empty($librarySuffix)) {
    $libraryName .= '.' . $librarySuffix;
  }

  // Alter library for 'svg' method
  if ($type == 'svg') {
    $libSettings = $libraries[$libraryName]['js'];
    $libraries[$libraryName]['js'] = [
      $cdnLocation => $libSettings,
    ];
  }

  // Alter library for 'webfonts' method
  if ($type == 'webfonts') {
    $libSettings = $libraries[$libraryName]['css']['theme'];
    $libraries[$libraryName]['css']['theme'] = [
      $cdnLocation => $libSettings,
    ];
  }
}
